<!doctype html>
<html lang="zh-Hant">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Google Maps 用量儀表板</title>
    <style>
        body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial;margin:0;background:#fafafa}
        header{padding:12px 16px;background:#111;color:#fff}
        .card{background:#fff;border-radius:12px;box-shadow:0 2px 10px rgba(0,0,0,.06);padding:12px;margin:12px;position:relative}
        #usageLoading{position:absolute;inset:0;display:none;align-items:center;justify-content:center;background:rgba(255,255,255,.85);z-index:10}
        .spinner{width:48px;height:48px;border:6px solid #e5e7eb;border-top:6px solid #111;border-radius:50%;animation:spin 1s linear infinite}
        @@keyframes spin{from{transform:rotate(0)}to{transform:rotate(360deg)}}
        table{width:100%;border-collapse:collapse;font-size:14px}
        th,td{padding:6px 8px;border-bottom:1px solid #eee;text-align:left}
        tfoot td{border-top:1px solid #eee;font-weight:600}
        .toolbar{display:flex;gap:8px;align-items:center;margin:8px 12px}
        .btn{padding:8px 12px;border:0;border-radius:8px;background:#111;color:#fff;cursor:pointer}
        .muted{color:#777;font-size:12px}
    </style>
</head>
<body>
    <header>📊 Google Maps API 使用量</header>

    <section class="card" id="usageCard">
        <div id="usageLoading">
            <div style="text-align:center">
                <div class="spinner"></div>
                <p style="margin-top:10px;color:#333">載入中…</p>
            </div>
        </div>

        <h3 style="margin:0 0 8px">使用量（本月免費額度）</h3>
        <div id="usagePanelWrap">
            <table id="usageTable">
                <thead>
                    <tr>
                        <th>API</th>
                        <th>已用</th>
                        <th>總額度</th>
                        <th>剩餘</th>
                        <th>使用率</th>
                    </tr>
                </thead>
                <tbody id="usageTBody"></tbody>
                <tfoot>
                    <tr>
                        <td>合計（視為各 API 獨立配額）</td>
                        <td id="uSumUsed">0</td>
                        <td id="uSumQuota">0</td>
                        <td id="uSumRemain">0</td>
          
                    </tr>
                </tfoot>
            </table>
        </div>
    </section>
    @* <section class="card" id="liveCard">
        <h3 style="margin:0 0 8px">即時操作紀錄（自前端回報）</h3>
        <div class="muted" style="margin:4px 0 10px">
            若看不到更新：請確認 7243 網站有呼叫 <code>POST /api/usage/bump</code> 並帶上 <code>service</code>、<code>amount</code>、<code>reason</code>。
        </div>

        <table id="liveTable">
            <thead>
                <tr>
                    <th style="width:14%">時間</th>
                    <th style="width:18%">API</th>
                    <th style="width:10%">增加</th>
                    <th style="width:12%">目前累計</th>
                    <th>原因</th>
                </tr>
            </thead>
            <tbody id="liveTBody"></tbody>
            <tfoot>
                <tr>
                    <td colspan="5" class="muted" id="sessionSum"
                        style="border-top:1px solid #eee;padding-top:6px">
                        本頁期間新增：Places <span id="incPlaces">0</span>、Maps JS <span id="incMaps">0</span>、
                        Directions <span id="incDir">0</span>、Roads <span id="incRoads">0</span>
                    </td>
                </tr>
            </tfoot>
        </table>
    </section> *@



    <div class="toolbar">
        <button class="btn" id="btnRefresh">重新整理</button>
        <span class="muted" id="statusText"></span>
    </div>


    <script>
        // === 設定：把這個換成你的後端位址 ===
        const API_BASE = 'https://localhost:7151';
        const USAGE_URL = API_BASE + '/api/usage';

        const order = ["Places API", "Maps JavaScript API", "Directions API"];

        function setUsageLoading(on){
          const overlay = document.getElementById('usageLoading');
          const panel = document.getElementById('usagePanelWrap');
          if (overlay) overlay.style.display = on ? 'flex' : 'none';
          if (panel) panel.style.visibility = on ? 'hidden' : 'visible';
        }
        function fmt(n){ return (n ?? 0).toLocaleString(); }
        function pct(a,b){ if(!b) return '0%'; return Math.round((a/b)*100)+'%'; }
        function setText(id, v){ const el=document.getElementById(id); if(el) el.textContent=v; }

        function buildRow(name, used, quota, remaining){
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${name}</td>
            <td>${fmt(used)}</td>
            <td>${fmt(quota)}</td>
            <td>${fmt(remaining)}</td>
            <td>${pct(used, quota)}</td>
          `;
          return tr;
        }

        async function loadUsage(){
          setUsageLoading(true);
          const status = document.getElementById('statusText');
          status.textContent = '讀取中…';
          try{
            const r = await fetch(USAGE_URL, {
              cache: 'no-store',
            });
            if(!r.ok){
              const msg = await r.text().catch(()=> '');
              throw new Error('HTTP ' + r.status + (msg? (': '+msg) : ''));
            }
            const data = await r.json();
            renderUsage(data);
            status.textContent = '已更新：' + new Date().toLocaleString();
          }catch(e){
            console.error('讀取用量失敗', e);
            alert('讀取用量失敗：' + e.message);
            status.textContent = '讀取失敗';
          }finally{
            setUsageLoading(false);
            loadEventsFromLocal();

          }
        }

        function renderUsage(data){
          const tbody = document.getElementById('usageTBody');
          tbody.innerHTML = '';
          for (const name of order){
            const svc = (data.services && data.services[name]) || { used:0, quota:0, remaining:0 };
            tbody.appendChild(buildRow(name, svc.used, svc.quota, svc.remaining));
          }
          const totUsed = data.totals?.used ?? 0;
          const totQuota = data.totals?.quota ?? 0;
          const totRemain = data.totals?.remaining ?? 0;
          setText('uSumUsed', fmt(totUsed));
          setText('uSumQuota', fmt(totQuota));
          setText('uSumRemain', fmt(totRemain));
          setText('uSumPct', pct(totUsed, totQuota));
        }

        document.getElementById('btnRefresh').addEventListener('click', loadUsage);
        // 初次載入
        loadUsage();
                // ========= 即時紀錄：監聽 bump 事件（SSE 為主，無則輪詢） =========
        const LIVE_SSE_URL   = API_BASE + '/api/usage/stream'; // 若尚未做 SSE，可先忽略，會自動 fallback
        const LIVE_EVENTS_URL= API_BASE + '/api/usage/events'; // 輪詢端點，需支援 ?since=unixMs

        // 四大 API 名稱（跟後端統一）
        const APIS = ["Places API", "Maps JavaScript API", "Directions API"];

        // 目前後端回來的「累計」
        let lastTotals = { "Places API":0, "Maps JavaScript API":0, "Directions API":0};
        // 本頁期間「新增量」
        let sessionInc = { "Places API":0, "Maps JavaScript API":0, "Directions API":0};
        // 記住最後一筆事件時間，用於輪詢 since
        let lastEventTs = 0;

        // 在第一次載入用量後，把 totals 餵給 lastTotals
        function primeTotalsFromSummary(summaryData){
          for (const name of APIS){
            const svc = (summaryData.services && summaryData.services[name]) || {used:0};
            lastTotals[name] = Number(svc.used || 0);
          }
        }

        // 覆寫 loadUsage -> 在 renderUsage 後順便 primeTotals
        const _origLoadUsage = loadUsage;
        loadUsage = async function(){
          setUsageLoading(true);
          const status = document.getElementById('statusText');
          status.textContent = '讀取中…';
          try{
            const r = await fetch(USAGE_URL, { cache:'no-store' });
            if(!r.ok){
              const msg = await r.text().catch(()=> '');
              throw new Error('HTTP ' + r.status + (msg ? (': ' + msg) : ''));
            }
            const data = await r.json();
            renderUsage(data);
            primeTotalsFromSummary(data);        // ★ 初始化 lastTotals
            status.textContent = '已更新：' + new Date().toLocaleString();

            // 啟動即時監聽（只啟一次）
            if (!window.__liveStarted){ window.__liveStarted = true; startLiveFeed(); }
          } catch(e){
            console.error('讀取用量失敗', e);
            alert('讀取用量失敗：' + e.message);
            status.textContent = '讀取失敗';
          } finally {
            setUsageLoading(false);
          }
        };

        // 將一筆事件畫到表格，並更新 totals + sessionInc
        function applyEvent(ev){
          // 標準化欄位
          const ts      = ev.ts || ev.timestamp || Date.now();
          const service = ev.service || ev.api || '';
          const amount  = Number(ev.amount || 1);
          const reason  = ev.reason || '';

          if (!APIS.includes(service)) return; // 不認得的先略過（或可映射）

          // 更新最後事件時間（輪詢會用到）
          if (typeof ts === 'number') lastEventTs = Math.max(lastEventTs, ts);
          else lastEventTs = Date.now();

          // 更新累計與本頁期間新增
          lastTotals[service] = (lastTotals[service] || 0) + amount;
          sessionInc[service] = (sessionInc[service] || 0) + amount;

          // 寫入表格
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${new Date(ts).toLocaleTimeString()}</td>
            <td>${service}</td>
            <td>+${amount.toLocaleString()}</td>
            <td>${(lastTotals[service]).toLocaleString()}</td>
            <td class="muted">${escapeHtml(reason)}</td>
          `;
          const tbody = document.getElementById('liveTBody');
          tbody.insertBefore(tr, tbody.firstChild); // 最新排最上面

          // 更新「本頁期間新增」摘要
          document.getElementById('incPlaces').textContent = (sessionInc["Places API"] || 0).toLocaleString();
          document.getElementById('incMaps').textContent   = (sessionInc["Maps JavaScript API"] || 0).toLocaleString();
          document.getElementById('incDir').textContent    = (sessionInc["Directions API"] || 0).toLocaleString();

        saveEventToLocal({
          ts: ev.ts || Date.now(),
          service: ev.service || '',
          amount: ev.amount || 1,
          reason: ev.reason || ''
        });

        }

        function escapeHtml(s){
          const div = document.createElement('div'); div.textContent = String(s ?? ''); return div.innerHTML;
        }

        // 啟動即時來源：先試 SSE → 失敗則輪詢
        function startLiveFeed(){
          if (window.EventSource){
            try{
              const es = new EventSource(LIVE_SSE_URL, { withCredentials:false });
              es.onmessage = (e) => {
                try{
                  const ev = JSON.parse(e.data);
                  applyEvent(ev);
                }catch(_){}
              };
              es.onerror = () => { console.warn('SSE 失敗，改用輪詢'); es.close(); startPolling(); };
              console.log('[live] 使用 SSE 連線');
              return;
            }catch(_){ /* fall through */ }
          }
          console.log('[live] 不支援 SSE，改用輪詢');
          startPolling();
        }

        // 每 3 秒抓一次新事件（需後端支援 /api/usage/events?since=unixMs）
        let pollTimer = null;
        function startPolling(){
          if (pollTimer) return;
          const tick = async () => {
            try{
              const url = `${LIVE_EVENTS_URL}?since=${lastEventTs || 0}`;
              const r = await fetch(url, { cache:'no-store' });
              if (r.ok){
                const list = await r.json(); // 期待陣列 [{ts, service, amount, reason}, ...]
                if (Array.isArray(list)){
                  for (const ev of list) applyEvent(ev);
                }
              }
            }catch(_){}
          };
          pollTimer = setInterval(tick, 3000);
          tick();
        }

        function loadEventsFromLocal() {
          let events = JSON.parse(localStorage.getItem('usageEvents') || '[]');
          for (const ev of events) {
            applyEvent(ev);
          }
        }

        function saveEventToLocal(ev) {
          let events = JSON.parse(localStorage.getItem('usageEvents') || '[]');
          events.unshift(ev); // 新事件放最前面
          localStorage.setItem('usageEvents', JSON.stringify(events));
        }


        
    </script>
</body>
</html>
